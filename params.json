{"name":"npmvc","tagline":"PureMVC for node.js","body":"### install\r\n\r\n```\r\nnpm install npmvc\r\n```\r\n\r\n[![Build Status](https://travis-ci.org/rstr74/npmvc.svg?branch=develop)](https://travis-ci.org/rstr74/npmvc)\r\n[![npm version badge](https://img.shields.io/npm/v/npmvc.svg)](https://www.npmjs.org/package/npmvc)\r\n[![downloads badge](http://img.shields.io/npm/dm/npmvc.svg)](https://www.npmjs.org/package/npmvc)\r\n\r\n# PureMVC for node.js\r\n\r\n### Modification of the [multicore javascript](https://github.com/PureMVC/puremvc-js-multicore-framework/wiki) port for use in a node.js environment.\r\n\r\nThis is the master repository of the npm ```npmvc``` module.\r\n\r\nThe main goal of this module is to add more flexibility and modulairity within the use of the combination of Node.js and the PureMVC framework. The module enables the aggregation of PureMVC classes in a local file structure or/and in seperated modules.\r\n\r\nIt adds an ```include``` method on top of the official multicore PureMVC JavaScript library (currently version 1.0.1). This method is based on the node.js ```require``` method and is added to the puremvc namespace. (See API specs below).\r\n\r\nYou can use the ```include``` function to include dependecies that are located local or in other npm modules. Class files are wrapped the node.js module.export style (see Creating external class files).\r\n\r\n\r\n### Current versions\r\n* 1.0.6 (latest)\r\n* 1.0.6-rc3\r\n* 1.0.5 (stable)\r\n\r\n## setup a puremvc project in node.js\r\n\r\nWhen installed you can use it like this\r\n```js\r\n\r\nvar puremvc = require(\"npmvc\");\r\n\r\npuremvc.setSourceDir(__dirname+\"/src\");\r\npuremvc.include(\"AppConstants\");\r\npuremvc.include(\"ApplicationFacade\");\r\n\r\n// make instance of ApplicationFacade and trigger start command\r\nvar app = test.ApplicationFacade.getInstance(test.ApplicationFacade.NAME);\r\napp.start();\r\n\r\n```\r\n\r\n## Creating external class files\r\n```js\r\nmodule.exports = function(include,puremvc) {\r\n\r\n// use include te aquire dependency class files\r\ninclude(\"controller/StartCommand\");\r\n\r\n// ---> now you can use puremvc.define to define class\r\n/**\r\n * @class test.ApplicationFacade\r\n * @extends puremvc.Facade\r\n */\r\npuremvc.define(\r\n\t{\r\n\t\tname: 'test.ApplicationFacade',\r\n\t\tparent: puremvc.Facade\r\n\t},\r\n\t{\r\n\t\t/**\r\n\t\t * @method start\r\n\t\t * @return {[type]} [description]\r\n\t\t */\r\n\t\tstart: function() {\r\n\r\n\t\t\tthis.registerCommand(\"START\", test.controller.StartCommand);\r\n\t\t\tthis.sendNotification(\"START\", {});\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\t/**\r\n\t\t * Retrieve an instance of ApplicationFacade. \r\n\t\t * If one has not yet been\r\n\t\t * instantiated, one will be created for you.\r\n\t\t *\r\n\t\t * @static\r\n\t\t * @param {string} multitonKey\r\n\t\t * @return test.ApplicationFacade\r\n\t\t */\r\n\t\tgetInstance: function(multitonKey) {\r\n\t\t\t\r\n\t\t\tvar instanceMap = puremvc.Facade.instanceMap;\r\n\t\t\tinstance = instanceMap[multitonKey]; // read from the instance map\r\n\r\n\t\t\tif (instance) // if there is an instance...\r\n\t\t\t\treturn instance; // return it\r\n\r\n\t\t\t\r\n\t\t\treturn instanceMap[multitonKey] = new test.ApplicationFacade(multitonKey);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @static\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tNAME: 'test.ApplicationFacade'\r\n\t})\r\n};\r\n```\r\n\r\n\r\n# Extra methods:\r\nThis module adds some exra methods on top of the ```puremvc``` root object:\r\n\r\n### puremvc.setSourceDir(path:string):void\r\n**path [string]** Sets the source dir for all include's, It uses this for includes on all directory levels. So when you include a dependencie in say ```model/MyProxy``` you have to reference ```model/vo/MyVo``` by using the path up from the sourceDir, not relative to the folder the file is in: \r\n\r\n```\r\npuremvc.include(\"model/vo/MyVo\");\r\n```\r\n\r\nIf you have to hack this, you can use **tempPath**, the second param of puremvc.include. See below.\r\n\r\nAlso note that if you do not set the sourceDir it will default to ```process.cwd()``` (the directory where you started the main node file).\r\n\r\n----\r\n### puremvc.include(path:String, tempPath:String, callback:function):*\r\n\r\nReturns any value, but mainly use for return the reference to the classlets constructor from ```puremvc.define```.\r\n\r\n**path [string]**\r\n\r\nPath to puremvc class, relative from path set by ```puremvc.setSourceDir```\r\n\r\n**tempPath [String]**\r\nThis overides the sourceDir. An include of ```MyVo``` in class ```model/vo/MyVo``` would look like this:\r\n\r\n```\r\npuremvc.include(\"vo/MyVo\",__dirname);\r\n```\r\n\r\n**callback [function]**\r\nYou can use a callback, but you have to trigger it in the aquired class file.\r\n\r\nYou can **include a class in an other npm module** if the file is not equal in the context of your current sourceDir path. So when you want to load the class ```SomeClass``` in the module ```my-npm-module``` then do not use tempPath but use:\r\n\r\n```\r\npuremvc.include(\"my-npm-module/path/to/SomeClass\");\r\n```\r\n\r\n----\r\n### puremvc.getSourceDir():string\r\nreturns the current source directory, root of puremvc classes.\r\n\r\n# Creating npm modules\r\n\r\nThis is one way to create puremvc modules that harmonize with npm (node package manager).\r\n\r\nin package.json add a puremvc object, and provide a namespace, sourcedir (relative from module root dir), and an array with initial includes.\r\nThe main property has to point to 'index.js'.\r\n```\r\n{\r\n  \"name\": \"somemodule\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Just a module\",\r\n  \"main\": \"index\",\r\n  \"puremvc\":{\r\n    \"namespace\":\"com.domain.somemodule\",\r\n    \"sourcedir\":\"./src/\",\r\n    \"include\":[\r\n      \"mediator/SomeMediator\",\r\n      \"model/SomeProxy\"\r\n   ]\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\"\r\n}\r\n```\r\n\r\nfor index.js use this code:\r\n```js\r\nmodule.exports = function(include,puremvc) {\r\n        puremvc.registerModule(__dirname);\r\n}\r\n```\r\n\r\nNow in any point in your npmvc application  you can import a module by using the include method:\r\n```js\r\nmodule.exports = function(include,puremvc) {\r\n       include(\"somemodule\");\r\n\r\n       \tpuremvc.define(\r\n\t\t// CLASS INFO\r\n\t\t{\r\n\t\t\tname: 'com.domain.command.RunCommand',\r\n\t\t\tparent: puremvc.SimpleCommand\r\n\t\t},\r\n\t\t// INSTANCE MEMBERS\r\n\t\t{\r\n\t\t\texecute: function() {\r\n\t\t\t\tconsole.log(puremvc.module(\"somemodule\"));\r\n\t\t\t\tvar mediator = new com.domain.somemodule.mediator.SomeMediator();\r\n\t\t\t\tthis.facade.registerMediator(mediator);\r\n\t\t\t}\r\n\t\t});\r\n}\r\n```\r\n\r\n# Extra options:\r\n\r\n### puremvc.validateIncludePaths \r\n**boolean (default:false)**\r\n\r\nThis option only works on macosx darwin. In a case insensitive environment typo's can be hard to find because node.js on a mac does not throw an error when loading case typo's in filenames. When validateIncludePaths is set to true it will warn when a file that is included has a case typo in it's path.\r\n\r\nNote that in a other environment than 'darwin', npmvc will ignore this option and outputs a warning about that when set to 'true'.\r\n\r\nSet this option before calling the include method.\r\nExample usage:\r\n```\r\nvar puremvc = require(\"npmvc\");\r\npuremvc.validateIncludePaths = true;\r\n```\r\n\r\n### puremvc.throwErrors\r\n**boolean (default:true)**\r\n\r\nThis option only works on macosx darwin. It suppresses throwing case insensitive errors. It is mainly for testing, so you can ignore it basicly.\r\n\r\n\r\n# The MIT License\r\n\r\nCopyright (c) 2015 Robbert Streng\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}